---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 26, 2024 @ 11:59PM
author: "Jenny Nguyen, UID: 805947763"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:
```{r}
#| eval: true
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1. Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2. Create a **private** repository `biostat-203b-2024-winter` and add `Hua-Zhou` and TA team (`Tomoki-Okuno` for Lec 1; `jonathanhori` and `jasenzhang1` for Lec 80) as your collaborators with write permission.

3. Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `main` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `main` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in the `main` branch.

4. After each homework due date, course reader and instructor will check out your `main` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5. After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data v2.2](https://physionet.org/content/mimiciv/2.2/), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. **You must complete Q2 before working on the remaining questions.** (Hint: The CITI training takes a few hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Answer:** I completed the CITI training course on January 16, 2024. The completion report can be found [here](https://www.citiprogram.org/verify/?kdd92c426-b6c0-49a6-8ef2-b96af9d28869-60561109), and the completion certificate can be found [here](https://www.citiprogram.org/verify/?w947c2148-fd7d-4523-9d26-270aeb8d778e-60561109).

## Q3. Linux Shell Commands

1. Make the MIMIC v2.2 data available at location `~/mimic`. 
```{bash}
ls -l ~/mimic/
```
Refer to the documentation <https://physionet.org/content/mimiciv/2.2/> for details of data files. Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files and are not big-data-friendly practices. Read from the data folder `~/mimic` directly in following exercises. 

  Use Bash commands to answer following questions.

2. Display the contents in the folders `hosp` and `icu` using Bash command `ls -l`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

**Answer:** Below are the contents in the `hosp` folder. 
```{bash}
ls -l ~/mimic/hosp/
```
Below are the contents in the `icu` folder. 
```{bash}
ls -l ~/mimic/icu/
```
These data files are distributed as `.csv.gz` files instead of `.csv` files because `.csv.gz` files are compressed, which helps to save internet bandwidth. 

3. Briefly describe what Bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

**Answer:** `zcat` can be used to display the contents of a gzipped file. `zless` and `zmore` can be used to page through a gzipped file. `zgrep` can be used to search through a gzipped file. 

4. (Looping in Bash) What's the output of the following bash script?
```{bash}
#| eval: true
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
done
```
Display the number of lines in each data file using a similar loop. (Hint: combine linux commands `zcat <` and `wc -l`.)

**Answer:** Below are the number of lines in each data file. 
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | wc -l
```

```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | wc -l
```

```{bash}
zcat < ~/mimic/hosp/patients.csv.gz | wc -l
```

5. Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? Do they match the number of patients listed in the `patients.csv.gz` file? (Hint: combine Linux commands `zcat <`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

**Answer:** The first few lines of `admissions.csv.gz` are displayed below. 
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head -5
```
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | awk 'END {print NR}'
```
There are 431232 rows in this data file. 

```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, '{print $1}' | sort | uniq | wc -l
```
There are 180734 unique patients (identified by `subject_id`) in this data file. 

```{bash}
zcat < ~/mimic/hosp/patients.csv.gz | awk -F, '{print $1}' | sort | uniq | wc -l
```
The number of patients listed in the `patients.csv.gz` file is 299713. Thus, the number of unique patients in the `admissions.csv.gz` file does not match the number of patients in the `patients.csv.gz` file. 

6. What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `race`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on; skip the header line.)

**Answer:** The possible values taken by the variable `admission_type` and the count for each unique value are displayed below. 
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, '{print $6}' | grep -v 'admission_type' | sort | uniq -c 
```
The possible values taken by the variable `admission_location` and the count for each unique value are displayed below. 
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, '{print $8}' | grep -v 'admission_location' | sort | uniq -c 
```
The possible values taken by the variable `insurance` and the count for each unique value are displayed below. 
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, '{print $10}' | grep -v 'insurance' | sort | uniq -c 
```

The possible values taken by the variable `race` and the count for each unique value are displayed below. 
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, '{print $13}' | grep -v 'race' | sort | uniq -c 
```

7. _To compress, or not to compress. That's the question._ Let's focus on the big data file `labevents.csv.gz`. Compare compressed gz file size to the uncompressed file size. Compare the run times of `zcat < ~/mimic/hosp/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. Discuss the trade off between storage and speed for big data files. (Hint: `gzip -dk < FILENAME.gz > ./FILENAME`. Remember to delete the large `labevents.csv` file after the exercise.)

**Answer:**
```{bash}
#| eval: false
gzip -dk < ~/mimic/hosp/labevents.csv.gz > ~/mimic/hosp/labevents.csv
```

```{bash}
ls -l ~/mimic/hosp/labevents.csv
ls -l ~/mimic/hosp/labevents.csv.gz
```
The file size for the compressed file `labevents.csv.gz` is 1.9GB, while the file size for the uncompressed file `labevents.csv` is 13.7GB. The file size for the uncompressed file is much larger and takes up more space than the file size for the compressed file. 

```{bash}
time zcat < ~/mimic/hosp/labevents.csv.gz | wc -l
```
```{bash}
time wc -l ~/mimic/hosp/labevents.csv
```
The run time of `zcat < ~/mimic/hosp/labevents.csv.gz | wc -l` was 18.3 seconds, while the run time of `wc -l ~/mimic/hosp/labevents.csv` was 4.2 seconds. Although the file size of the compressed file was smaller, it did take longer to run the command. In contrast, the file size of the uncompressed file was large, but the run time for the command was much faster. Thus, there are trade-offs between having a small, compressed file that runs slower versus a large, uncompressed file that runs faster. 

## Q4. Who's popular in Pride and Prejudice

1. You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder. 
```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```
Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.
```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  # some bash commands here
done
```

2. What's the difference between the following two commands?
```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```
and
```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```

3. Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:
```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```
Using `chmod` to make the file executable by the owner, and run
```{bash}
#| eval: false
./middle.sh pg42671.txt 20 5
```
Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2024`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

```{bash}
cal
```
The `cal` command displays the calendar for this month and year, January 2024. 

```{bash}
cal 2024
```
The `cal 2024` command displays the calendars for all 12 months in the 2024 year. 

```{bash}
cal 9 1752
```
The `cal 9 1752` command displays the calendar for the month of September in the year 1752. This calendar is unusual because it skips the dates between the 3rd and the 13th. 

```{bash}
date
```
The `date` command displays today's date and time. 

```{bash}
hostname
```
The `hostname` command displays the name of the host system, which is my Macbook Pro in this case. 

```{bash}
arch
```
The `arch` command displays the architecture type of my Mac, which has a 64-bit ARM architecture. 

```{bash}
uname -a
```
The `uname -a` command displays information about my Mac system, and the `-a` option is used to display all of the available system characteristics. The information that is displayed includes the Kernel name, network node hostname, kernel release date, kernel version, machine hardware name, hardware platform, and operating system. 

```{bash}
uptime
```
The `uptime` command shows how long my Mac has been running. The current time is 12:01pm. My Mac has been up for 47 days and 21:43 hours. There is 1 user. The load average of my Mac is 1.70 over the last 1 minute, 1.54 over the last 5 minutes, and 1.47 over the last 15 minutes. 

```{bash}
who am i
```
The `who am i` command shows who is logged in on my Mac. It displays my log-in name and today's date and current time. 

```{bash}
who
```
The `who` command also shows who is logged in on my Mac, with slightly different information. It displays my log-in name. The terminal name is console. The time that I logged in was on December 1st at 2:19pm. 

```{bash}
w
```
The `w` command also shows who is logged in on my Mac and what the current activity is. It displays the current time, which is 1:25pm. My Mac has been up running for 47 days and 23:07 hours. There is 1 user logged into my Mac, and the load averages are 1.66 over the last 1 minute, 2.09 over the last 5 minutes, and 2.11 over the last 15 minutes. It also displays my log-in name. The terminal name is console. I logged in on December 1st, and my Mac has been idle for 47 days. 

```{bash}
id
```
The `id` command shows the user and group names, as well as the IDs that are associated with each user or group. 

```{bash}
last | head
```
The `last` command shows a list of the last log-ins of users and terminals, starting from the most recent time. This command is piped into the `head` command, which displays only the first few lines of the list. The output displays my log-in name, the terminal name, the start and stop time of each session, and the duration of each session. 

```{bash}
echo {con,pre}{sent,fer}{s,ed}
```
The `echo {con,pre}{sent,fer}{s,ed}` command prints all of the words that start with "con-" or "pre-", are followed by "-sent-" or "-fer-", and end with "-s" or "-ed". 

```{bash}
time sleep 5
```
The `time sleep 5` command shows that it took 5.009 seconds to run the `sleep 5` command. The `sleep 5` command suspends execution for 5 seconds. 

```{bash}
history | tail
```
The `history | tail` command, when run in terminal, shows a list of commands that were previously executed, with the `tail` command displaying only the last few lines of the list. 

   27  man uname -a | head -30
   28  man uptime | head -30
   29  man who am i 
   30  man who | head -30
   31  man w | head -30
   32  man id | head -30
   33  man last | head -30
   34  man sleep | head -30
   35  man history | head -30
   36  history | tail

## Q6. Book

1. Git clone the repository <https://github.com/christophergandrud/Rep-Res-Book> for the book _Reproducible Research with R and RStudio_ to your local machine. 

2. Open the project by clicking `rep-res-3rd-edition.Rproj` and compile the book by clicking `Build Book` in the `Build` panel of RStudio. (Hint: I was able to build `git_book` and `epub_book` but not `pdf_book`.)

The point of this exercise is (1) to get the book for free and (2) to see an example how a complicated project such as a book can be organized in a reproducible way.

For grading purpose, include a screenshot of Section 4.1.5 of the book here.