---
title: "Biostat 203B Homework 4"
subtitle: "Due Mar 8 @ 11:59PM"
author: "Jenny Nguyen"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
execute:
  eval: true
---

Display machine information:
```{r}
sessionInfo()
```
Display my machine memory.
```{r}
memuse::Sys.meminfo()
```

Load database libraries and the tidyverse frontend:
```{r}
library(bigrquery)
library(dbplyr)
library(DBI)
library(gt)
library(gtsummary)
library(tidyverse)
```

## Q1. Compile the ICU cohort in HW3 from the Google BigQuery database 

Below is an outline of steps. In this homework, we exclusively work with the BigQuery database and should not use any MIMIC data files stored on our local computer. Transform data as much as possible in BigQuery database and `collect()` the tibble only at the end of Q1.7.

### Q1.1 Connect to BigQuery

Authenticate with BigQuery using the service account token. Please place the service account token (shared via BruinLearn) in the working directory (same folder as your qmd file). Do **not** add this token to your git repository.
```{r}
# path to the service account token 
satoken <- "biostat-203b-2024-winter-313290ce47a6.json"
# BigQuery authentication using service account
bq_auth(path = satoken)
```
Connect to BigQuery database `mimic4_v2_2` in GCP (Google Cloud Platform), using the project billing account `biostat-203b-2024-winter`.
```{r}
# connect to the BigQuery database `biostat-203b-2024-winter.mimic4_v2_2`
con_bq <- dbConnect(
    bigrquery::bigquery(),
    project = "biostat-203b-2024-winter",
    dataset = "mimic4_v2_2",
    billing = "biostat-203b-2024-winter"
)
con_bq
```
List all tables in the `mimic4_v2_2` database.
```{r}
dbListTables(con_bq)
```
### Q1.2 `icustays` data

Connect to the `icustays` table.
```{r}
# full ICU stays table
icustays_tble <- tbl(con_bq, "icustays") |>
  # show_query() |>
  print(width = Inf)
```

### Q1.3 `admissions` data

Connect to the `admissions` table.
```{r}
admissions_tble <- tbl(con_bq, "admissions") |>
  # show_query() |>
  print(width = Inf)
```

### Q1.4 `patients` data

Connect to the `patients` table.
```{r}
patients_tble <- tbl(con_bq, "patients") |>
  # show_query() |>
  print(width = Inf)
```

### Q1.5 `labevents` data

Connect to the `labevents` table and retrieve a subset that only contain subjects who appear in `icustays_tble` and the lab items listed in HW3. Only keep the last lab measurements before the ICU stay and pivot lab items to become variables/columns. Write all steps in _one_ chain of pipes.
```{r}
labevents_tble <- tbl(con_bq, "labevents") |>
  #select necessary columns
  select(subject_id, itemid, storetime, valuenum) |>
  #filter by lab measurements we are interested in 
  filter(itemid %in% c(50912, 50971, 50983, 50902, 
                       50882, 51221, 51301, 50931)) |>
  #join icustays tibble, keeping all observations in icustays tibble, select
  #necessary columns
  right_join(
    select(icustays_tble, subject_id, stay_id, intime),
    by = "subject_id", 
    relationship = "many-to-many"
    ) |>
  #move columns to better positions
  relocate(stay_id, .after = subject_id) |>
  relocate(intime, .after = storetime) |>
  #filter lab measurements taken before transfer to icu
  filter(storetime < intime) |>
  #group data by subject_id, then stay_id, then itemid
  group_by(subject_id, stay_id, itemid) |>
  #arrange by descending storetime (latest to earliest) for each group
  arrange(desc(storetime), .by_group = TRUE) |>
  #for each group, select the first row (most recent measurement before icu)
  filter(row_number() == 1) |>
  #remove columns that are no longer needed 
  select(-c(intime, storetime)) |>
  #remove grouping 
  ungroup() |>
  #turn data into wide format 
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  #arrange by subject_id 
  arrange(subject_id) |>
  #rename columns based on correct lab measurement name 
  rename(
    creatinine = "50912",
    potassium = "50971",
    sodium = "50983",
    chloride = "50902",
    bicarbonate = "50882",
    hematocrit = "51221",
    wbc = "51301",
    glucose = "50931"
  ) |>
  print(width = Inf)
```

### Q1.6 `chartevents` data

Connect to `chartevents` table and retrieve a subset that only contain subjects who appear in `icustays_tble` and the chart events listed in HW3. Only keep the first chart events during ICU stay and pivot chart events to become variables/columns. Write all steps in _one_ chain of pipes.
```{r}
chartevents_tble <- tbl(con_bq, "chartevents") |>
  #select necessary columns
  select(subject_id, stay_id, charttime, itemid, valuenum) |>
  #filter by vitals we are interested in
  filter(itemid %in% c(220045, 220179, 220180, 223761, 220210)) |>
  #join icustays tibble, select necessary columns
  left_join(
    select(icustays_tble, subject_id, stay_id, intime),
    by = c("subject_id", "stay_id"), 
    relationship = "many-to-many"
    ) |>
  #move column to better position
  relocate(intime, .after = stay_id) |>
  #filter chart events taken during icu stay
  filter(charttime >= intime) |>
  #group data by subject_id, then stay_id, then itemid
  group_by(subject_id, stay_id, itemid) |>
  #arrange by charttime (earliest to latest) for each group
  arrange(charttime, .by_group = TRUE) |>
  #for each group, select the first row (first chart event during icu stay)
  filter(row_number() == 1) |>
  #remove columns that are no longer needed 
  select(-c(intime, charttime)) |>
  #remove grouping
  ungroup() |>
  #turn data into wide format 
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  #arrange by subject_id 
  arrange(subject_id) |>
  #rename columns based on correct vital name
  rename(
    heart_rate = "220045",
    non_invasive_blood_pressure_systolic = "220179",
    non_invasive_blood_pressure_diastolic = "220180",
    temperature_fahrenheit = "223761",
    respiratory_rate = "220210"
  ) |> 
  print(width = Inf)
```

### Q1.7 Put things together

This step is similar to Q7 of HW3. Using _one_ chain of pipes `|>` to perform following data wrangling steps: (i) start with the `icustays_tble`, (ii) merge in admissions and patients tables, (iii) keep adults only (age at ICU intime >= 18), (iv) merge in the labevents and chartevents tables, (v) `collect` the tibble.

```{r}
mimic_icu_cohort <- icustays_tble |>
  #merge in admissions tibble
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) |>
  #merge in patients tibble
  left_join(patients_tble, by = "subject_id") |>
  #find age at intime 
  mutate(intime_year = year(intime),
         year_diff = intime_year - anchor_year,
         intime_age = anchor_age + year_diff) |>
  #keep adults only
  filter(intime_age >= 18) |>
  #remove columns that are no longer needed
  select(-c(intime_year, year_diff)) |>
  #merge in labevents tibble
  left_join(labevents_tble, by = c("subject_id", "stay_id")) |>
  #merge in chartevents tibble
  left_join(chartevents_tble, by = c("subject_id", "stay_id")) |>
  #arrange by subject_id
  arrange(subject_id) |>
  #collect tibble
  collect() |>
  print(width = Inf)
```

### Q1.8 Preprocessing

Perform the following preprocessing steps. (i) Lump infrequent levels into "Other" level for `first_careunit`, `last_careunit`, `admission_type`, `admission_location`, and `discharge_location`. (ii) Collapse the levels of `race` into `ASIAN`, `BLACK`, `HISPANIC`, `WHITE`, and `Other`. (iii) Create a new variable `los_long` that is `TRUE` when `los` is greater than or equal to 2 days. (iv) Summarize the data using `tbl_summary()`, stratified by `los_long`. Hint: `fct_lump` and `fct_collapse` from the `forcats` package can be useful.

Hint: Below is a numerical summary of my tibble after preprocessing:

<iframe width=95% height="500" src="./mimic_icu_cohort_gtsummary.html"></iframe>

```{r}
#preprocess data 
mimic_icu_cohort <- mimic_icu_cohort |>
  mutate(first_careunit = fct_lump_lowfreq(as.factor(first_careunit), 
                                           other_level = "Other"),
         last_careunit = fct_lump_lowfreq(as.factor(last_careunit),
                                          other_level = "Other"),
         admission_type = fct_lump_lowfreq(as.factor(admission_type),
                                           other_level = "Other"),
         admission_location = fct_lump_lowfreq(as.factor(admission_location),
                                               other_level = "Other"),
         discharge_location = fct_lump_lowfreq(as.factor(discharge_location),
                                               other_level = "Other"),
         race = fct_collapse(as.factor(race),
                             ASIAN = c("ASIAN", 
                                       "ASIAN - ASIAN INDIAN",
                                       "ASIAN - CHINESE", 
                                       "ASIAN - KOREAN",
                                       "ASIAN - SOUTH EAST ASIAN"),
                             BLACK = c("BLACK/AFRICAN",
                                       "BLACK/AFRICAN AMERICAN",
                                       "BLACK/CAPE VERDEAN",
                                       "BLACK/CARIBBEAN ISLAND"),
                             HISPANIC = c("HISPANIC/LATINO - PUERTO RICAN",
                                          "HISPANIC/LATINO - DOMINICAN",
                                          "HISPANIC OR LATINO",
                                          "HISPANIC/LATINO - GUATEMALAN",
                                          "HISPANIC/LATINO - SALVADORAN",
                                          "HISPANIC/LATINO - CUBAN",
                                          "HISPANIC/LATINO - COLUMBIAN",
                                          "HISPANIC/LATINO - MEXICAN",
                                          "HISPANIC/LATINO - HONDURAN",
                                          "HISPANIC/LATINO - CENTRAL AMERICAN"),
                             WHITE = c("WHITE",
                                       "WHITE - OTHER EUROPEAN",
                                       "WHITE - RUSSIAN",
                                       "WHITE - BRAZILIAN",
                                       "WHITE - EASTERN EUROPEAN"),
                             other_level = "Other"),
         los_long = ifelse(los >= 2, TRUE, FALSE)
         ) |>
  print(width = Inf)

#summarize preprocessed data
mimic_icu_cohort |>
  select(-c(subject_id, hadm_id, stay_id, intime, outtime, admittime, dischtime, 
            deathtime, admit_provider_id, edregtime, edouttime, anchor_age, 
            anchor_year, anchor_year_group)) |>
  tbl_summary(by = los_long)
```

### Q1.9 Save the final tibble

Save the final tibble to an R data file `mimic_icu_cohort.rds` in the `mimiciv_shiny` folder.
```{r}
# make a directory mimiciv_shiny
if (!dir.exists("mimiciv_shiny")) {
  dir.create("mimiciv_shiny")
}
# save the final tibble
mimic_icu_cohort |>
  write_rds("mimiciv_shiny/mimic_icu_cohort.rds", compress = "gz")
```
Close database connection and clear workspace.
```{r}
if (exists("con_bq")) {
  dbDisconnect(con_bq)
}
rm(list = ls())
```
Although it is not a good practice to add big data files to git, for grading purpose, please add `mimic_icu_cohort.rds` to your git repository.

## Q2. Shiny app

Develop a Shiny app for exploring the ICU cohort data created in Q1. The app should reside in the `mimiciv_shiny` folder. The app should contain at least two tabs. One tab provides easy access to the graphical and numerical summaries of variables (demographics, lab measurements, vitals) in the ICU cohort. The other allows user to choose a specific patient in the cohort and display the patient's ADT and ICU stay information as we did in Q1 of HW3.

**Answer:** See `app.R` in the `mimiciv_shiny` folder for the Shiny app.