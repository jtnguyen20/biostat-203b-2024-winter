---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 22 @ 11:59PM
author: "Jenny Nguyen"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. Your algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 

Load libraries.
```{r}
library(GGally)
library(gtsummary)
library(tidyverse)
library(tidymodels)
library(glmnet)
library(ranger)
library(xgboost)
library(keras)
library(stacks)
library(vip)
```

1. Data preprocessing and feature engineering.

**Answer:**
Read in data and begin preprocessing. 
```{r}
#read in mimic icu cohort data
mimiciv_icu_cohort <- readRDS("mimic_icu_cohort.rds") |>
  #select identifiers, features and outcome to use in algorithm
  select(subject_id, hadm_id, stay_id, first_careunit, marital_status, race, 
         gender, intime_age, bicarbonate, potassium, wbc, chloride, hematocrit, 
         creatinine, sodium, glucose, non_invasive_blood_pressure_diastolic,
         non_invasive_blood_pressure_systolic, temperature_fahrenheit, 
         heart_rate, respiratory_rate, los_long) |>
  #convert first_careunit and race to character, los_long to factor
  mutate(first_careunit = as.character(first_careunit),
         race = as.character(race),
         los_long = as.factor(los_long)) |>
  print(width = Inf)

#check which columns have na values
mimiciv_icu_cohort |>
  map_dbl(~sum(is.na(.)))
```
Please see step 2 for additional preprocessing and feature engineering. I needed to split the data first before I could preprocess the training set. 

2. Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.

**Answer:**
Split data into training and test set. 
```{r}
set.seed(203)

# sort
mimiciv_icu_cohort <- mimiciv_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id)

data_split <- initial_split(
  mimiciv_icu_cohort, 
  # stratify by los_long
  strata = "los_long", 
  prop = 0.5
  )

#split into training and testing
mimic_other <- training(data_split)
mimic_test <- testing(data_split)
```

::: {.panel-tabset}

#### Logistic Regression

Continue to preprocess and feature engineer the training set using recipe. 
```{r}
#recipe 
logit_recipe <- 
  recipe(
    los_long ~ ., 
    data = mimic_other
    ) |>
  #removed identifiers
  step_rm(subject_id, hadm_id, stay_id) |>
  #mean imputation for missing numerical values
  step_impute_mean(bicarbonate, potassium, wbc, chloride, hematocrit, sodium,
                   creatinine, glucose, temperature_fahrenheit, heart_rate,
                   non_invasive_blood_pressure_diastolic, 
                   non_invasive_blood_pressure_systolic,
                   respiratory_rate) |>
  #mode imputation for missing categorical values
  step_impute_mode(marital_status) |>
  #create dummy variables 
  step_dummy(all_nominal_predictors()) |>
  #zero-variance filter
  step_zv(all_numeric_predictors()) |>
  #center and scale numeric variables
  step_normalize(all_numeric_predictors()) |>
  print()
```

#### Random Forest

Continue to preprocess and feature engineer the training set using recipe. 
```{r}
#recipe 
rf_recipe <- 
  recipe(
    los_long ~ ., 
    data = mimic_other
    ) |>
  #removed identifiers
  step_rm(subject_id, hadm_id, stay_id) |>
  #mean imputation for missing numerical values
  step_impute_mean(bicarbonate, potassium, wbc, chloride, hematocrit, sodium,
                   creatinine, glucose, temperature_fahrenheit, heart_rate,
                   non_invasive_blood_pressure_diastolic, 
                   non_invasive_blood_pressure_systolic,
                   respiratory_rate) |>
  #mode imputation for missing categorical values
  step_impute_mode(marital_status) |>
  #zero-variance filter
  step_zv(all_numeric_predictors()) |>
  print()
```

#### Boosting

Continue to preprocess and feature engineer the training set using recipe. 
```{r}
gb_recipe <- 
  recipe(
    los_long ~ ., 
    data = mimic_other
    ) |>
  #removed identifiers
  step_rm(subject_id, hadm_id, stay_id) |>
  #mean imputation for missing numerical values
  step_impute_mean(bicarbonate, potassium, wbc, chloride, hematocrit, sodium,
                   creatinine, glucose, temperature_fahrenheit, heart_rate,
                   non_invasive_blood_pressure_diastolic, 
                   non_invasive_blood_pressure_systolic,
                   respiratory_rate) |>
  #mode imputation for missing categorical values
  step_impute_mode(marital_status) |>
  #create dummy variables 
  step_dummy(all_nominal_predictors()) |>
  #zero-variance filter
  step_zv(all_numeric_predictors()) |>
  print()
```

:::

3. Train and tune the models using the training set.

::: {.panel-tabset}

#### Logistic Regression

**Answer:**
Specify the model. 
```{r}
logit_mod <- 
  logistic_reg(
    penalty = tune(), 
    mixture = tune()
  ) |> 
  set_engine("glmnet", standardize = FALSE) |>
  print()
```

Bundle the recipe and model together.
```{r}
logit_wf <- workflow() |>
  add_recipe(logit_recipe) |>
  add_model(logit_mod) |>
  print()
```

Tune the grid.
```{r}
logit_param_grid <- grid_regular(
  penalty(range = c(-4, 2)), 
  mixture(),
  levels = c(75, 5)
  ) |>
  print()
```

Set and fit cross-validation.
```{r}
#set cross validation partitions
set.seed(203)

folds <- vfold_cv(mimic_other, v = 3)
folds

#fit cross validation
logit_fit <- logit_wf |>
  tune_grid(
    resamples = folds,
    grid = logit_param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )

#visualize cross validation results
logit_fit |>
  # aggregate metrics from 5 folds
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = penalty, y = mean, color = factor(mixture))) +
  geom_point() +
  labs(x = "Penalty", y = "CV AUC") +
  scale_x_log10()

#show top 5 models
logit_fit |>
  show_best("roc_auc")

#select best model
best_logit <- logit_fit |>
  select_best("roc_auc")
best_logit
```

#### Random Forest

**Answer:**
Specify the model. 
```{r}
rf_mod <- 
  rand_forest(
    mode = "classification",
    mtry = tune(),
    trees = tune()
  ) |> 
  set_engine("ranger", importance = "impurity") |>
  print()
```

Bundle the recipe and model together.
```{r}
rf_wf <- workflow() |>
  add_recipe(rf_recipe) |>
  add_model(rf_mod) |>
  print()
```

Tune the grid.
```{r}
rf_param_grid <- grid_regular(
  trees(range = c(50L, 150L)), 
  mtry(range = c(1L, 5L)),
  levels = c(3, 5)
  ) |>
  print()
```

Set and fit cross-validation.
```{r}
#set cross validation partitions
set.seed(203)

folds <- vfold_cv(mimic_other, v = 3)
folds

#fit cross validation
rf_fit <- rf_wf |>
  tune_grid(
    resamples = folds,
    grid = rf_param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )

#visualize cross validation results
rf_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = trees, y = mean, color = factor(mtry))) +
  geom_point() + 
  labs(x = "Num. of Trees", y = "CV AUC")

#show top 5 models
rf_fit |>
  show_best("roc_auc")

#select best model
best_rf <- rf_fit |>
  select_best("roc_auc")
best_rf
```

#### Boosting

**Answer:**
Specify the model. 
```{r}
gb_mod <- 
  boost_tree(
    mode = "classification",
    trees = 500, 
    tree_depth = tune(),
    learn_rate = tune()
  ) |> 
  set_engine("xgboost") |>
  print()
```

Bundle the recipe and model together.
```{r}
gb_wf <- workflow() |>
  add_recipe(gb_recipe) |>
  add_model(gb_mod) |>
  print()
```

Tune the grid.
```{r}
gb_param_grid <- grid_regular(
  tree_depth(range = c(1L, 3L)),
  learn_rate(range = c(-5, 2), trans = log10_trans()),
  levels = c(3, 5)
  ) |>
  print()
```

Set and fit cross-validation.
```{r}
#set cross validation partitions
set.seed(203)

folds <- vfold_cv(mimic_other, v = 3)
folds

#fit cross validation
gb_fit <- gb_wf |>
  tune_grid(
    resamples = folds,
    grid = gb_param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )
gb_fit

#visualize cross validation results
gb_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = learn_rate, y = mean, color = factor(tree_depth))) +
  geom_point() +
  labs(x = "Learning Rate", y = "CV AUC") +
  scale_x_log10()

#show top 5 models
gb_fit |>
  show_best("roc_auc")

#select best model
best_gb <- gb_fit |>
  select_best("roc_auc")
best_gb
```

:::

4. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?

::: {.panel-tabset}

#### Logistic Regression

**Answer:**
Finalize the model.
```{r}
#final workflow
logit_final_wf <- logit_wf |>
  finalize_workflow(best_logit)
logit_final_wf

#fit the whole training set, then predict test set
logit_final_fit <- 
  logit_final_wf |>
  last_fit(data_split)
logit_final_fit

#test metrics
logit_final_fit |> 
  collect_metrics()

#extract model coefficients
logit_final_wf |>
  fit(mimic_other) |>
  extract_fit_parsnip() |>
  vip(geom = "point")
```
The logistic regression model has an AUC of 0.599 and an accuracy of 0.577. Both the AUC and accuracy are close to 0.50, indicating that the model is not very good at predicting long ICU stays. In this model, the most important features in predicting long ICU stays are `heart_rate` and if the patient's `first_careunit` is MICU or MICU/SICU because they have the highest importance scores according to the variables of importance plot above.

#### Random Forest

**Answer:**
Finalize the model.
```{r}
#final workflow
rf_final_wf <- rf_wf |>
  finalize_workflow(best_rf)
rf_final_wf

#fit the whole training set, then predict test set
rf_final_fit <- 
  rf_final_wf |>
  last_fit(data_split)
rf_final_fit

#test metrics
rf_final_fit |> 
  collect_metrics()

#identify variables of importance
rf_final_wf |>
  fit(mimic_other) |>
  extract_fit_parsnip() |>
  vip(geom = "point")
```
The random forest model has an AUC of 0.634 and an accuracy of 0.599. Both the AUC and accuracy from the random forest model are higher than the AUC and accuracy from the logistic regression model, indicating that the random forest model is  better at predicting long ICU stays than the logistic regression model. In this model, the most important features in predicting long ICU stays are `non_invasive_blood_pressure_systolic`, `heart_rate`, and `hematocrit` because they have the highest importance scores according to the variables of importance plot above.

#### Boosting

**Answer:**
Finalize the model.
```{r}
#final workflow
gb_final_wf <- gb_wf |>
  finalize_workflow(best_gb)
gb_final_wf

#fit the whole training set, then predict test set
gb_final_fit <- 
  gb_final_wf |>
  last_fit(data_split)
gb_final_fit

#test metrics
gb_final_fit |> 
  collect_metrics()

#identify variables of importance
gb_final_wf |>
  fit(mimic_other) |>
  extract_fit_parsnip() |>
  vip(geom = "point")
```
The boosting model has an AUC of 0.646 and an accuracy of 0.605. Both the AUC and accuracy from the boosting model are higher than the AUC and accuracy from the logistic regression model and the random forest model, indicating that the boosting model is better at predicting long ICU stays than the other two models. In this model, the most important features in predicting long ICU stays are `temperature_fahrenheit`, `intime_age`, and `non_invasive_blood_pressure_systolic` because they have the highest importance scores according to the variables of importance plot above.

:::

## Model Stacking

**Answer:**
Set up tuning grid for the stacked model.
```{r}
logit_res <- 
  tune_grid(
    object = logit_wf,
    resamples = folds, 
    grid = logit_param_grid,
    control = control_stack_grid()
  )
logit_res

rf_res <- 
  tune_grid(
    object = rf_wf, 
    resamples = folds, 
    grid = rf_param_grid,
    control = control_stack_grid()
  )
rf_res

gb_res <- 
  tune_grid(
    object = gb_wf, 
    resamples = folds, 
    grid = gb_param_grid,
    control = control_stack_grid()
  )
gb_res
```

Build the stacked ensemble.
```{r}
mimic_model_st <- 
  #initialize the stack
  stacks() |>
  #add candidate members
  add_candidates(logit_res) |>
  add_candidates(rf_res) |>
  add_candidates(gb_res) |>
  #determine how to combine their predictions
  blend_predictions(
    metrics = c("roc_auc")
    ) |>
  #fit the candidates with nonzero stacking coefficients
  fit_members()
mimic_model_st
```

Plot results.
```{r}
autoplot(mimic_model_st, type = "members")
#top results
autoplot(mimic_model_st, type = "weights")
```

Complete the final classification.
```{r}
mimic_pred <- mimic_test |>
  bind_cols(predict(mimic_model_st, mimic_test, type = "prob")) |>
  print(width = Inf)

#compute roc auc for model
yardstick::roc_auc(
  mimic_pred,
  truth = los_long,
  contains(".pred_FALSE")
  )

#generate predictions from ensemble members
mimic_pred <-
  mimic_test |>
  select(los_long) |>
  bind_cols(
    predict(
      mimic_model_st,
      mimic_test,
      type = "class",
      members = TRUE
      )
    ) |>
  print(width = Inf)

#compute accuracy for model
yardstick::accuracy(
  mimic_pred,
  truth = los_long, 
  estimate = .pred_class
  )
```

The ensemble model has an AUC of 0.651 and an accuracy of 0.610. Both the AUC and accuracy from the ensemble model are higher than the AUC and accuracy from all other three individual models, indicating that the ensemble model is the best at predicting long ICU stays. 

In terms of performance, the ensemble model performed the best out of all the models as it had the highest AUC. The boosting model performed the second best, followed by the random forest model, and then finally the logistic regression model, which had the lowest AUC. These results make sense because typically, combining multiple models into an ensemble model will provide the best model, and thus, performance.

In terms of interpretability, the logistic regression model is the most interpretable because the coefficients of a logistic regression model can clearly convey both the effect size and direction of the features on the outcome. Thus, it's easy to understand how increasing or decreasing a feature will impact the outcome. The random forest and boosting models are both less interpretable because they involve averaging predictions from multiple decision trees, which makes it less intuitive to understand how certain features impact the outcome. The ensemble model is probably the least interpretable because it combines all three models into one, making it even more difficult to understand how certain features impact the outcome.

Based off of assessing both the performance and interpretability of the models, we can see that there is a trade-off between maximizing performance and maximizing interpretability.